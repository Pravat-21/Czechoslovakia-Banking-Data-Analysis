CREATE DATABASE PROJECT1;
USE DATABASE PROJECT1;
--------------------------------------------------------------------------------------
-- ACOUNT TABLE CREATION
CREATE OR REPLACE TABLE PP_ACOUNT
(
    account_id	Integer PRIMARY KEY,
    district_id	Integer,
    frequency	string,
    Date	Date,
    Account_type	string,
    Card_Assigned	string,
    FOREIGN KEY (district_id) references PP_DISTRICT(District_Code)
);
--CARD TABLE CREATION
CREATE OR REPLACE TABLE PP_CARD
(
    card_id	Integer PRIMARY KEY,
    disp_id	Integer,
    type	string ,
    issued	Date,
    FOREIGN KEY (disp_id) references PP_DISP(disp_id)
);

CREATE OR REPLACE TABLE PP_CLIENT
(
    client_id	Integer PRIMARY KEY,
    Sex	string,
    Birth_date	Date,
    district_id	Integer,
    FOREIGN KEY (district_id) references PP_DISTRICT(District_Code)
);

CREATE OR REPLACE TABLE PP_DISP
(
    disp_id	Integer PRIMARY KEY,
    client_id	Integer,
    account_id	Integer,
    type	string,
    FOREIGN KEY (account_id) references PP_ACOUNT(account_id),
    FOREIGN KEY (client_id) references PP_CLIENT(client_id)
);

CREATE OR REPLACE TABLE PP_DISTRICT
(
    District_code	Integer PRIMARY KEY,
    District_name	string ,
    Region	string ,
    No_of_inhabitants	Integer,
    No_of_municipalities_with_inhabitants_LESS499	Integer,
    No_of_municipalities_with_inhabitants_500TO1999	Integer,
    No_of_municipalities_with_inhabitants_2000TO9999	Integer,
    No_of_municipalities_with_inhabitantsGREATER10000	Integer,
    No_of_cities	Integer,
    Ratio_of_urban_inhabitants	Float,
    Average_salary	Integer,
    No_of_entrepreneurs_per_1000_inhabitants	Integer,
    No_committed_crime_2017	Integer,
    No_committed_crime_2018	Integer
);
CREATE OR REPLACE TABLE PP_LOAN
(
    loan_id	Integer,
    account_id	Integer,
    LOAN_Date	Date,
    amount	Integer,
    duration	Integer,
    payments	Integer,
    status	string,
    FOREIGN KEY (account_id) references PP_ACOUNT(account_id)
);

CREATE OR REPLACE TABLE PP_ORDER
(
    order_id	Integer PRIMARY KEY,
    account_id	Integer,
    bank_to	string,
    account_to	Integer,
    amount	Float,
    FOREIGN KEY (account_id) references PP_ACOUNT(account_id)
);

CREATE OR REPLACE TABLE PP_TRNX
(
    trans_id	Integer,
    account_id	Integer,
    Date	Date,
    Type	string,
    operation	string,
    amount	Integer,
    balance	Float,
    Purpose	string, 
    bank	string ,
    account_Partner	Integer,
    FOREIGN KEY (account_id) references PP_ACOUNT(account_id)
);

----------------------------------------------------------------
CREATE OR REPLACE STORAGE INTEGRATION PP_BANK_INTERATION
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED=TRUE
STORAGE_AWS_ROLE_ARN ='arn:aws:iam::800145959640:role/bank_project_role'
STORAGE_ALLOWED_LOCATIONS =('s3://czechoslovakiabanking/');

DESC  INTEGRATION PP_BANK_INTERATION;

CREATE OR REPLACE STAGE BANK_P1_STAGE
URL='s3://czechoslovakiabanking'
FILE_FORMAT= PROJECT1.PUBLIC.BANK_CSV
STORAGE_INTEGRATION = PP_BANK_INTERATION;

LIST @BANK_P1_STAGE;

SHOW STAGES;

--PIPE CREATION
CREATE OR REPLACE PIPE PP_ACOUNT_PIPE AUTO_INGEST = TRUE AS
COPY INTO PROJECT1.PUBLIC.PP_ACOUNT
FROM '@BANK_P1_STAGE/PP_ACOUNT/'
FILE_FORMAT =PROJECT1.PUBLIC.BANK_CSV;


CREATE OR REPLACE PIPE PP_CARD_PIPE AUTO_INGEST = TRUE AS
COPY INTO PROJECT1.PUBLIC.PP_CARD
FROM '@BANK_P1_STAGE/PP_CARD/'
FILE_FORMAT =PROJECT1.PUBLIC.BANK_CSV;


CREATE OR REPLACE PIPE PP_CLIENT_PIPE AUTO_INGEST = TRUE AS
COPY INTO PROJECT1.PUBLIC.PP_CLIENT
FROM '@BANK_P1_STAGE/PP_CLIENT/'
FILE_FORMAT =PROJECT1.PUBLIC.BANK_CSV;


CREATE OR REPLACE PIPE PP_DISP_PIPE AUTO_INGEST = TRUE AS
COPY INTO PROJECT1.PUBLIC.PP_DISP
FROM '@BANK_P1_STAGE/PP_DISP/'
FILE_FORMAT =PROJECT1.PUBLIC.BANK_CSV;


CREATE OR REPLACE PIPE PP_DISTRICT_PIPE AUTO_INGEST = TRUE AS
COPY INTO PROJECT1.PUBLIC.PP_DISTRICT
FROM '@BANK_P1_STAGE/PP_DISTRICT/'
FILE_FORMAT =PROJECT1.PUBLIC.BANK_CSV;


CREATE OR REPLACE PIPE PP_LOAN_PIPE AUTO_INGEST = TRUE AS
COPY INTO PROJECT1.PUBLIC.PP_LOAN
FROM '@BANK_P1_STAGE/PP_LOAN/'
FILE_FORMAT =PROJECT1.PUBLIC.BANK_CSV;


CREATE OR REPLACE PIPE PP_ORDER_PIPE AUTO_INGEST = TRUE AS
COPY INTO PROJECT1.PUBLIC.PP_ORDER
FROM '@BANK_P1_STAGE/PP_ORDER/'
FILE_FORMAT =PROJECT1.PUBLIC.BANK_CSV;

CREATE OR REPLACE PIPE PP_TRNX_PIPE AUTO_INGEST = TRUE AS
COPY INTO PROJECT1.PUBLIC.PP_TRNX
FROM '@BANK_P1_STAGE/PP_TRNX/'
FILE_FORMAT =PROJECT1.PUBLIC.BANK_CSV;

SHOW PIPES;

SELECT * FROM PROJECT1.PUBLIC.PP_ACOUNT;--DONE
SELECT * FROM PROJECT1.PUBLIC.PP_CARD;--DONE
SELECT * FROM PROJECT1.PUBLIC.PP_CLIENT;--DONE
SELECT * FROM PROJECT1.PUBLIC.PP_DISP;--DONE
SELECT * FROM PROJECT1.PUBLIC.PP_DISTRICT;--DONE
SELECT * FROM PROJECT1.PUBLIC.PP_LOAN;--DONE
SELECT * FROM PROJECT1.PUBLIC.PP_ORDER;--DONE
SELECT * FROM PROJECT1.PUBLIC.PP_TRNX;


SELECT COUNT(*) FROM PROJECT1.PUBLIC.PP_ACOUNT;
SELECT COUNT(*) FROM PROJECT1.PUBLIC.PP_CARD;
SELECT COUNT(*) FROM PROJECT1.PUBLIC.PP_CLIENT;
SELECT COUNT(*) FROM PROJECT1.PUBLIC.PP_DISP;
SELECT COUNT(*) FROM PROJECT1.PUBLIC.PP_DISTRICT;
SELECT COUNT(*) FROM PROJECT1.PUBLIC.PP_LOAN;
SELECT COUNT(*) FROM PROJECT1.PUBLIC.PP_ORDER;
SELECT COUNT(*) FROM PROJECT1.PUBLIC.PP_TRNX;

ALTER PIPE PROJECT1.PUBLIC.PP_ACOUNT_PIPE REFRESH;
ALTER PIPE PROJECT1.PUBLIC.PP_CARD_PIPE REFRESH;
ALTER PIPE PROJECT1.PUBLIC.PP_CLIENT_PIPE REFRESH;
ALTER PIPE PROJECT1.PUBLIC.PP_DISP_PIPE REFRESH;
ALTER PIPE PROJECT1.PUBLIC.PP_DISTRICT_PIPE REFRESH;
ALTER PIPE PROJECT1.PUBLIC.PP_LOAN_PIPE REFRESH;
ALTER PIPE PROJECT1.PUBLIC.PP_ORDER_PIPE REFRESH;
ALTER PIPE PROJECT1.PUBLIC.PP_TRNX_PIPE REFRESH;

----------------------------------------------------------------------------------------------
-- ANALYSIS
SELECT * FROM PROJECT1.PUBLIC.PP_ACOUNT;
SELECT * FROM PROJECT1.PUBLIC.PP_CARD;
SELECT * FROM PROJECT1.PUBLIC.PP_CLIENT;
SELECT * FROM PROJECT1.PUBLIC.PP_DISP;
SELECT * FROM PROJECT1.PUBLIC.PP_DISTRICT;
SELECT * FROM PROJECT1.PUBLIC.PP_LOAN;
SELECT * FROM PROJECT1.PUBLIC.PP_ORDER;
SELECT * FROM PROJECT1.PUBLIC.PP_TRNX;

----------------------------------------------------------------------------------------------------
--What is the demographic profile of the bank's clients and how does it vary across districts? 

--ADDING AGE COLUMN IN CLIENT TABLE 
ALTER TABLE PP_CLIENT ADD COLUMN AGE INT;
SELECT * FROM PP_CLIENT;
UPDATE PP_CLIENT SET AGE = DATEDIFF(YEAR,BIRTH_DATE,CURRENT_DATE());

----1. DEMOGRAPIC PROFILE PER DISTRICT----------------------------------------
CREATE OR REPLACE TABLE DEMOGRAPIC_PROFILE AS
SELECT A.DISTRICT_ID,A.DISTRICT_NAME,COUNT(DISTINCT(A.CLIENT_ID)) AS TOTAL_COUNT_CLIENT,
SUM(CASE WHEN SEX='Male' THEN 1 ELSE 0 END ) AS TOTAL_MALE,
SUM(CASE WHEN SEX='Female' THEN 1 ELSE 0 END ) AS TOTAL_FEMALE,
ROUND(SUM(CASE WHEN SEX='Male' THEN 1 ELSE 0 END )*100/COUNT(DISTINCT(A.CLIENT_ID)),2) AS MALE_PERCENTAGE,
ROUND(SUM(CASE WHEN SEX='Female' THEN 1 ELSE 0 END )*100/COUNT(DISTINCT(A.CLIENT_ID)),2) AS FEMALE_PERCENTAGE,
ROUND((TOTAL_FEMALE*100/TOTAL_MALE),2) AS FEMALE_MALE_RATIO_PERCENTAGE,
ROUND(AVG(AVERAGE_SALARY),2) AS AVERAGE_SALARY,
ROUND(AVG(AGE),0) AS OVERALL_AVERAGE_AGE
FROM
(SELECT CL.*,DIS.DISTRICT_NAME,DIS.REGION,DIS.NO_OF_INHABITANTS,DIS.AVERAGE_SALARY
FROM PP_CLIENT CL
LEFT OUTER JOIN PP_DISTRICT DIS
ON CL.DISTRICT_ID=DIS.DISTRICT_CODE)A
GROUP BY 1,2
ORDER BY 1 ; 

-------------------------------------------------------------------------------------------------------------------------
--2.How the banks have performed over the years. Give their detailed analysis year & month-wise.
SELECT * FROM PP_TRNX;
SELECT DISTINCT BANK FROM PP_TRNX;
SELECT DISTINCT ACCOUNT_ID FROM PP_TRNX;--3.6K
SELECT DISTINCT ACCOUNT_ID FROM PROJECT1.PUBLIC.PP_ORDER;--3.8K

SELECT DISTINCT ACCOUNT_ID FROM PP_TRNX WHERE ACCOUNT_ID NOT IN 
(SELECT DISTINCT ACCOUNT_ID FROM PP_ORDER);

-----------------------------------------------------------------------------
CREATE OR REPLACE TABLE TRNX_DETAILS_ANALYSIS_YEAR_MNTH_WISE AS
SELECT DISTINCT BANK AS BANK_NAME ,YEAR(DATE) YEAR,
       MONTHNAME(DATE)MONTH,
       COUNT(DISTINCT ACCOUNT_ID) AS TOTALNO_ACCOUNT_HOLD,
       COUNT(TRANS_ID) AS TOTAL_TRNX,
       SUM(CASE WHEN TYPE='Withdrawal' THEN AMOUNT ELSE 0 END)AS TOTAL_WITHDRAWL_AMOUNT,
       SUM(CASE WHEN TYPE='Credit' THEN AMOUNT ELSE 0 END)AS TOTAL_CREDIT_AMOUNT,
       SUM(CASE WHEN TYPE='Withdrawal' AND PURPOSE='Insurance Payment' THEN AMOUNT ELSE 0 END)AS TOTAL_INSURNCE_PAYMENT_AMOUNT,
       SUM(CASE WHEN TYPE='Withdrawal' AND PURPOSE='Loan Payment' THEN AMOUNT ELSE 0 END)AS TOTAL_LOAN_PYMT_AMOUNT,
       CASE WHEN
                TOTAL_WITHDRAWL_AMOUNT=0 THEN 0
                ELSE ROUND(TOTAL_INSURNCE_PAYMENT_AMOUNT*100/TOTAL_WITHDRAWL_AMOUNT,2)
            END AS INSRNCE_PYMT_PERCNTGE,
       CASE WHEN
                TOTAL_LOAN_PYMT_AMOUNT=0 THEN 0
                ELSE ROUND(TOTAL_LOAN_PYMT_AMOUNT*100/TOTAL_WITHDRAWL_AMOUNT,2)
            END AS LOAN_PYMT_PERCNTGE,
       ROUND(AVG(BALANCE),2) AS AVG_BALALNCE_PER_ACOUNT
      
FROM PP_TRNX WHERE BANK IS NOT NULL AND BANK <> ''
GROUP BY 1,2,3
ORDER BY 1,2 DESC,3 DESC,4 DESC,9 DESC ,10 DESC ;

-----------------------------------------------------------------------------------------
CREATE OR REPLACE TABLE BANK_TRNX_MATRIX_ACCOUNT_WISE AS
SELECT DISTINCT ACCOUNT_ID ,
       YEAR(DATE) AS YEAR,
       MONTHNAME(DATE) AS MONTH_NAME,
       COUNT(TRANS_ID)AS TOTAL_TRANX,
       COUNT(CASE WHEN TYPE='Withdrawal' THEN TRANS_ID ELSE NULL END ) AS TOTAL_WITHDRAWL_TNAX,
       COUNT(CASE WHEN TYPE='Credit' THEN TRANS_ID ELSE NULL END ) AS TOTAL_CREDIT_TNAX,
       ROUND(TOTAL_WITHDRAWL_TNAX*100/TOTAL_TRANX,2) AS WITHDRL_PERCENTAGE,
       ROUND(TOTAL_CREDIT_TNAX*100/TOTAL_TRANX,2) AS DEPOSIT_TRANX_PERCENTAGE
FROM PP_TRNX
GROUP BY 1,2,3
ORDER BY 1,2 DESC,4 DESC;
----------------------------------------------------------------------------------------------
--What are the most common types of accounts and how do they differ in terms of usage and profitability? 
CREATE OR REPLACE TABLE ACCOUNT_ANALYSIS_DETAILS AS 
(SELECT DISTINCT ACCOUNT_TYPE,
       YEAR(DATE)AS YEAR,
       MONTHNAME(DATE) AS MONTH_NAME,
       COUNT(TRANS_ID) AS TOTAL_TRNX,
       COUNT(CASE WHEN TYPE='Withdrawal' THEN TRANS_ID ELSE NULL END) AS TOTAL_WITHDRL_COUNT,
       SUM(CASE WHEN TYPE='Withdrawal' THEN AMOUNT ELSE 0 END) AS TOTAL_WITHDRL_AMOUNT,
       COUNT(CASE WHEN TYPE='Credit' THEN TRANS_ID ELSE NULL END) AS TOTAL_DEPOSIT_COUNT,
       SUM(CASE WHEN TYPE='Credit' THEN AMOUNT ELSE 0 END) AS TOTAL_DEPOSIT_AMOUNT
FROM
(SELECT TR.*,AC.DISTRICT_ID,AC.FREQUENCY,AC.DATE AS ACC_CREATED_DATE,AC.ACCOUNT_TYPE, AC.CARD_ASSIGNED
FROM PP_TRNX TR
LEFT OUTER JOIN PP_ACOUNT AC ON AC.ACCOUNT_ID=TR.ACCOUNT_ID)
GROUP BY 1,2,3
ORDER BY 1, 2 DESC,4 DESC,6 DESC,8 DESC);

SELECT * FROM PROJECT1.PUBLIC.ACCOUNT_ANALYSIS_DETAILS;

--------------------------------------------------------------------------------------------------------------------
--Which types of cards are most frequently used by the bank's clients and what is the overall profitability of the credit card business? 
SELECT * FROM PP_CARD;--892
SELECT * FROM PP_DISP;--5369
SELECT * FROM PP_CLIENT;--5369
-----------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE TABLE CREDIT_CARD_DETAILS_MATIX AS 
(SELECT 
    YEAR(TRNX_DATE)AS TRNX_YEAR,
    MONTHNAME(TRNX_DATE) AS MONTH_NAME,
     CARD_TYPE,
    COUNT(DISTINCT CLIENT_ID) AS TOTAL_COUNT_CLIENT,
    COUNT(DISTINCT(CASE WHEN SEX='Male' THEN CLIENT_ID ELSE NULL END)) AS TOTAL_MALE_USER,
    COUNT(DISTINCT(CASE WHEN SEX='Female' THEN CLIENT_ID ELSE NULL END)) AS TOTAL_FEMALE_USER,
    ROUND(AVG(CASE WHEN SEX='Male' THEN AGE ELSE 0 END),0) AS AVG_MALE_AGE,
    ROUND(AVG(CASE WHEN SEX='Female' THEN AGE ELSE 0 END),0) AS AVG_FEMALE_AGE,
    ROUND(AVG(CASE WHEN SEX='Male' THEN BALANCE ELSE 0 END),0) AS AVG_MALE_BALANCE,
    ROUND(AVG(CASE WHEN SEX='Female' THEN BALANCE ELSE 0 END),0) AS AVG_FEMALE_BALANCE,
    SUM(AMOUNT) AS TOTAL_TRANSFERED_MONEY,
    COUNT(TRANS_ID) AS TOTAL_TRNX_COUNT,
    SUM(CASE WHEN ACCOUNT_TYPE='Salary account' THEN AMOUNT ELSE 0 END) AS AMOUNT_TNFR_SALARY_ACC,
    SUM(CASE WHEN ACCOUNT_TYPE='NRI account' THEN AMOUNT ELSE 0 END) AS AMOUNT_TNFR_NRI_ACC,
    SUM(CASE WHEN ACCOUNT_TYPE='Savings account' THEN AMOUNT ELSE 0 END) AS AMOUNT_TNFR_SAVINGS_ACC
FROM
(SELECT CL.CLIENT_ID,CR.CARD_ID,CL.DISTRICT_ID,DS.DISP_ID,DS.ACCOUNT_ID,CL.SEX,CL.BIRTH_DATE,CL.AGE,DS.TYPE AS DISPO_TYPE,
CR.TYPE AS CARD_TYPE,CR.ISSUED AS CARD_ISSUE_DATE,AC.FREQUENCY,AC.DATE AS ACC_CREATED_DATE,AC.ACCOUNT_TYPE,
A.TRANS_ID,A.DATE AS TRNX_DATE,A.AMOUNT,A.BALANCE
FROM PP_DISP DS 
LEFT OUTER JOIN PP_CARD CR ON DS.DISP_ID=CR.DISP_ID
LEFT OUTER JOIN PP_CLIENT CL ON DS.CLIENT_ID=CL.CLIENT_ID
LEFT OUTER JOIN PP_ACOUNT AC ON DS.ACCOUNT_ID=AC.ACCOUNT_ID
LEFT OUTER JOIN 
(SELECT * FROM PP_TRNX WHERE OPERATION='Credit card withdrawal')A
ON AC.ACCOUNT_ID=A.ACCOUNT_ID WHERE DISPO_TYPE='OWNER')
WHERE TRNX_YEAR IS NOT NULL AND CARD_TYPE IS NOT NULL
GROUP BY 1,2,3
ORDER BY 3,12 DESC,13 DESC);





































































































